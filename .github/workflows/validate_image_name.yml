name: ECR Image Tag Validation

on:
  pull_request:
    paths:
      - '**/values*.yaml'
  push:
    paths:
      - '**/values*.yaml'

jobs:
  validate_image_tags:
    name: Validate Image Tags
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Pull Request
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache repository state
        uses: actions/cache@v4
        with:
          path: |
            path/to/cache-directory
          key: ${{ runner.os }}-build-${{ hashFiles('**/values*.yaml') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Identify Values Files
        id: identify-values-files
        run: |
          echo "Searching for values*.yaml files..."
          values_files=$(find . -type f -name "values*.yaml")
          if [ -n "$values_files" ]; then
              echo "Values*.yaml files found:"
              echo "$values_files"
              echo "::set-output name=values_files::$values_files"
          else
              echo "No values*.yaml files found."
              exit 1
          fi

          overrideTag=""
          image=""
          latestTags=()

          for file in $values_files; do
              echo "Processing $file..."
              while IFS= read -r line; do
                  if [[ $line =~ image:\ (.+) ]]; then
                      image="${BASH_REMATCH[1]}"
                      echo "Image: $image"
                  fi
                  if [[ $line =~ overrideTag:\ (.+) ]]; then
                      overrideTag="${BASH_REMATCH[1]}"
                      echo "Override Tag: $overrideTag"
                      echo "Image: $image"
                      latestTags=()  # Clearing the latestTags array
                      continue
                  fi
                  if [[ $line =~ latestTag:\ (.+) ]]; then
                      if [[ -z "$overrideTag" ]]; then
                          latestTags+=("${BASH_REMATCH[1]}") # Append the latestTag to the array
                          echo "Latest Tag: ${BASH_REMATCH[1]}"
                      fi
                  fi
              done < "$file"
          done

          # Set outputs
          echo "::set-output name=overrideTag::$overrideTag"
          echo "::set-output name=image::$image"
          echo "::set-output name=latestTags::$latestTags"

      - name: Login to Amazon ECR
        run: |
          for file in $values_files; do
              echo "Processing $file..."
              # Use awk to filter out special characters
              # Here, we're assuming that the image lines start with 'image: ' and then contain the image URI
              # Adjust this pattern according to your YAML file's structure
              awk '/image:/ {gsub(/[^[:alnum:]._-]/, "", $2); print $2}' "$file" | while read -r image_uri; do
                  if [ -n "$image_uri" ]; then
                      account_id=$(echo "$image_uri" | cut -d'.' -f1)
                      region=$(echo "$image_uri" | cut -d'.' -f4)
                      echo "Logging in to Amazon ECR for image: $image_uri"
                      aws ecr get-login-password --region "$region" | docker login --username AWS --password-stdin "$account_id.dkr.ecr.$region.amazonaws.com"
                  fi
              done
          done

      - name: Debug Step Output
        run: |
          echo "Identify Values Files output: ${{ steps.identify-values-files.outputs.values_files }}"

      - name: List ECR Images, ImageTag/OverrrideTag
        run: |
          echo "Listing ECR repositories..."
          ecr_repositories=$(aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]' --output text)
          ecr_repositories="${ecr_repositories// /\\n}"  # Replace spaces with newlines for easier processing

          while IFS= read -r repo_info; do
              repo_name=$(echo "$repo_info" | cut -f1)
              repo_uri=$(echo "$repo_info" | cut -f2)
              echo "Describing images for repository: $repo_name ($repo_uri)"
              if [ -n "$image" ]; then
                  # Describe images for the repository
                  aws ecr describe-images --repository-name "$repo_name"
              else
                  echo "No images found for repository: $repo_name"
              fi
          done <<< "$ecr_repositories"
          echo "Done."

      - name: Check ECR
        if: ${{ steps.identify-values-files.outputs.values_files != '' }}
        run: |
          # Retrieve values from previous step outputs
          values_files="${{ steps.identify-values-files.outputs.values_files }}"
          ecr_repositories=$(echo "${{ steps.list-ecr-repos.outputs.ecr_repositories }}" | base64 -d)

          # Retrieve values from previous step outputs
          overrideTag=${{ steps.identify-values-files.outputs.overrideTag }}
          image=${{ steps.identify-values-files.outputs.image }}
          latestTags="${{ steps.identify-values-files.outputs.latestTags }}"

          # Check if image, overrideTag, or latestTags exist in ECR repositories
          if [[ -n "$image" ]]; then
              echo "Checking image against ECR repositories..."
              if echo "$ecr_repositories" | grep -q "$image"; then
                  echo "Image '$image' found in ECR."
              else
                  echo "Image '$image' not found in ECR."
              fi
          fi
          if [[ -n "$overrideTag" ]]; then
              echo "Checking overrideTag against ECR repositories..."
              if echo "$ecr_repositories" | grep -q "$overrideTag"; then
                  echo "OverrideTag '$overrideTag' found in ECR."
              else
                  echo "OverrideTag '$overrideTag' not found in ECR."
              fi
          fi
          if [[ -n "$latestTags" ]]; then
              for tag in $latestTags; do
                  echo "Checking latestTag '$tag' against ECR repositories..."
                  if echo "$ecr_repositories" | grep -q "$tag"; then
                      echo "LatestTag '$tag' found in ECR."
                  else
                      echo "LatestTag '$tag' not found in ECR."
                  fi
              done
          fi
      - name: Display Validation Result
        if: ${{ steps.identify-values-files.outputs.values_files != '' }}
        run: |
          # Check if the image, overrideTag, or latestTags are found in the ECR repository
          if [[ -n "${{ steps.check-ecr.outputs.imageFound }}" || -n "${{ steps.check-ecr.outputs.overrideTagFound }}" || -n "${{ steps.check-ecr.outputs.latestTagFound }}" ]]; then
              echo "Validation successful. Image, overrideTag, or latestTags found in ECR."
          else
              echo "Validation failed. Image, overrideTag, and latestTags not found in ECR."
              exit 1
          fi
