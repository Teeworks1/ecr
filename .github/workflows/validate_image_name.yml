name: ECR Image Tag Validation

on:
  pull_request:
    paths:
      - '**/values*.yaml'
  push:
    paths:
      - '**/values*.yaml'

jobs:
  validate_image_tags:
    name: Validate Image Tags
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Pull Request
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache repository state
        uses: actions/cache@v4
        with:
          path: |
            path/to/cache-directory
          key: ${{ runner.os }}-build-${{ hashFiles('**/values*.yaml') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check for changes
        id: diff
        run: |
          if [ $GITHUB_BASE_REF ]; then
            # Pull Request
            git fetch origin $GITHUB_BASE_REF --depth=1
            export DIFF=$(git diff --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA)
            echo "Diff between origin/$GITHUB_BASE_REF and $GITHUB_SHA"
          else
            # Push
            git fetch origin ${{ github.event.before }} --depth=1
            export DIFF=$(git diff --name-only ${{ github.event.before }} $GITHUB_SHA)
            echo "Diff between ${{ github.event.before }} and $GITHUB_SHA"
          fi
          echo "$DIFF"
          # Escape newlines (replace \n with %0A)
          echo "::set-output name=diff::$(echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g')"

      - name: Identify Values Files
        id: identify-values-files
        run: |
          echo "Searching for values*.yaml files..."
          # Get the paths of the changed files
          changed_files="${{ steps.diff.outputs.diff }}"

          # Filter the paths to include only values*.yaml files
          values_files=$(echo "$changed_files" | grep 'values.*\.yaml')

          if [ -n "$values_files" ]; then
              echo "Values*.yaml files found:"
              echo "$values_files"
              echo "::set-output name=values_files::$values_files"
          else
              echo "No values*.yaml files found."
              exit 1
          fi

          overrideTag=""
          image=""
          latestTags=()

          for file in $values_files; do
              echo "Processing $file..."
              while IFS= read -r line; do
                  if [[ $line =~ image:\ (.+) ]]; then
                      image="${BASH_REMATCH[1]}"
                      echo "Image: $image"
                  fi
                  if [[ $line =~ overrideTag:\ (.+) ]]; then
                      overrideTag="${BASH_REMATCH[1]}"
                      echo "Override Tag: $overrideTag"
                      echo "Image: $image"
                      latestTags=()  # Clearing the latestTags array
                      continue
                  fi
                  if [[ $line =~ latestTag:\ (.+) ]]; then
                      if [[ -z "$overrideTag" ]]; then
                          latestTags+=("${BASH_REMATCH[1]}") # Append the latestTag to the array
                          echo "Latest Tag: ${BASH_REMATCH[1]}"
                      fi
                  fi
              done < "$file"
          done

          # Set outputs
          echo "::set-output name=overrideTag::$overrideTag"
          echo "::set-output name=image::$image"
          echo "::set-output name=latestTags::$latestTags"

      - name: Login to Amazon ECR
        run: |
          for file in $values_files; do
              echo "Processing $file..."
              # Use awk to filter out special characters
              # Here, we're assuming that the image lines start with 'image: ' and then contain the image URI
              # Adjust this pattern according to your YAML file's structure
              awk '/image:/ {gsub(/[^[:alnum:]._-]/, "", $2); print $2}' "$file" | while read -r image_uri; do
                  if [ -n "$image_uri" ]; then
                      account_id=$(echo "$image_uri" | cut -d'.' -f1)
                      region=$(echo "$image_uri" | cut -d'.' -f4)
                      echo "Logging in to Amazon ECR for image: $image_uri"
                      aws ecr get-login-password --region "$region" | docker login --username AWS --password-stdin "$account_id.dkr.ecr.$region.amazonaws.com"
                  fi
              done
          done

      - name: List ECR Repos
        run: |
          echo "Listing ECR repositories..."
          aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]'
          echo "::set-output name=ecr_repositories::$(aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]' --json)"

      - name: Describe Images per Repository
        run: |
          ecr_repositories="${{ steps.list-ecr-repos.outputs.ecr_repositories }}"
          echo "ecr_repositories: $ecr_repositories" 

          # Check if ecr_repositories is empty or not
          if [ -z "$ecr_repositories" ]; then
            echo "No ECR repositories found."
            exit 1
          fi

          # Loop through each repository and describe images
          while IFS=$'\t' read -r repo_info; do
            repo_name=$(echo "$repo_info" | cut -f1)
            repo_uri=$(echo "$repo_info" | cut -f2)

            # Skip if repository name is empty
            if [ -z "$repo_name" ]; then
              echo "Skipping empty repository name."
              continue
            fi

            echo "Describing images for repository: $repo_name ($repo_uri)"
            aws ecr describe-images --repository-name "$repo_name"
          done <<< "$ecr_repositories"

          echo "Done."
