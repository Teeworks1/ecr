name: ECR Image Tag Validation

on:
  pull_request:
    paths:
      - '**/values*.yaml'
  push:
    paths:
      - '**/values*.yaml'

jobs:
  validate_image_tags:
    name: Validate Image Tags
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout Pull Request
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache repository state
        uses: actions/cache@v2
        with:
          path: |
            path/to/cache-directory
          key: ${{ runner.os }}-build-${{ hashFiles('**/values*.yaml') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Configure AWS Credentials for Region 2
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_REGION_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_REGION_2 }}
          aws-region: us-west-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Identify Values Files
        id: identify-values-files
        run: |
          echo "Searching for values*.yaml files..."
          values_files=$(find . -type f -name "values*.yaml")
          if [ -n "$values_files" ]; then
              echo "Values*.yaml files found:"
              echo "$values_files"
              echo "::set-output name=values_files::$values_files"
          else
              echo "No values*.yaml files found."
              exit 1
          fi
          overrideTag=""
          image=""
          latestTag=""
          for file in $values_files; do
              echo "Processing $file..."
              while IFS= read -r line; do
                  if [[ $line =~ overrideTag:\ (.+) ]]; then
                      overrideTag="${BASH_REMATCH[1]}"
                      echo "OverrideTag: $overrideTag"
                  fi
                  if [[ $line =~ image:\ (.+) ]]; then
                      image="${BASH_REMATCH[1]}"
                      echo "Image: $image"
                  fi
                  if [[ -z "$overrideTag" && $line =~ latestTag:\ (.+) ]]; then
                      latestTag="${BASH_REMATCH[1]}"
                      echo "Latest Tag: $latestTag"
                  fi
              done < "$file"
              if [[ -n "$overrideTag" && -n "$image" ]]; then
                  break
              fi
          done
          if [[ -z "$overrideTag" && -z "$image" ]]; then
              echo "OverrideTag and image(s) not found. Checking for latestTag..."
          fi
          if [[ -n "$overrideTag" || -n "$latestTag" ]]; then
              images=()
              for file in $values_files; do
                  echo "Processing $file..."
                  while IFS= read -r line; do
                      if [[ $line =~ image:\ (.+) ]]; then
                          image="${BASH_REMATCH[1]}"
                          echo "Image: $image"
                          if [[ -n "$overrideTag" ]]; then
                              echo "Pairing image with overrideTag..."
                              echo "Image: $image, OverrideTag: $overrideTag"
                          elif [[ -n "$latestTag" ]]; then
                              echo "Pairing image with latestTag..."
                              echo "Image: $image, LatestTag: $latestTag"
                          fi
                          images+=("$image")
                      fi
                  done < "$file"
              done
              echo "::set-output name=images::${images[*]}"
          fi
          echo "::set-output name=overrideTag::$overrideTag"
          echo "::set-output name=image::$image"
          if [[ -z "$overrideTag" ]]; then
              echo "::set-output name=latestTag::$latestTag"
          fi

      - name: List ECR Repositories
        run: |
          echo "Listing ECR repositories..."
          regions=$(aws ec2 describe-regions --output text --query "Regions[*].RegionName")
          for region in $regions; do
            echo "Region: $region"
            repositories=$(aws ecr describe-repositories --region $region --query 'repositories[*].[repositoryName, repositoryUri]')
            echo "::set-output name=ecr_repositories::$repositories"
          done

      - name: Check Overrides and Validate Image Tags in ECR
        if: ${{ steps.identify-values-files.outputs
