name: ECR Image Tag Validation

on:
  pull_request:
    paths:
      - '**/values*.yaml'
  push:
    paths:
      - '**/values*.yaml'

jobs:
  validate_image_tags:
    name: Validate Image Tags
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Pull Request
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache repository state
        uses: actions/cache@v2
        with:
          path: |
            path/to/cache-directory
          key: ${{ runner.os }}-build-${{ hashFiles('**/values*.yaml') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      #- name: Login to Amazon ECR
      #  uses: aws-actions/amazon-ecr-login@v2

      - name: Identify Values Files
        id: identify-values-files
        run: |
          #!/bin/bash

          echo "Searching for values*.yaml files..."
          values_files=$(find . -type f -name "values*.yaml")

          if [ -n "$values_files" ]; then
              echo "Values*.yaml files found:"
              echo "$values_files"
              echo "::set-output name=values_files::$values_files"
          else
              echo "No values*.yaml files found."
              exit 1
          fi
          
          overrideTag=""
          image=""
          latestTags=()

          for file in $values_files; do
              echo "Processing $file..."
              while IFS= read -r line; do
                  if [[ $line =~ image:\ (.+) ]]; then
                      image="${BASH_REMATCH[1]}"
                      echo "Image: $image"
                  fi
                  if [[ $line =~ overrideTag:\ (.+) ]]; then
                      overrideTag="${BASH_REMATCH[1]}"
                      echo "Override Tag: $overrideTag"
                      echo "Image: $image"
                      # If overrideTag is found, no need to search for latestTag
                      latestTags=()  # Clearing the latestTags array
                      continue
                  fi
                  if [[ $line =~ latestTag:\ (.+) ]]; then
                      if [[ -z "$overrideTag" ]]; then
                          latestTag+=("${BASH_REMATCH[1]}") # Append the latestTag to the array
                          echo "Latest Tag: ${BASH_REMATCH[1]}"
                      fi
                  fi
              done < "$file"
              
              # Check if overrideTag is found before breaking the loop
              if [[ -n "$overrideTag" ]]; then
                  break
              fi
          done
          # Set outputs
          echo "::set-output name=overrideTag::$overrideTag"
          echo "::set-output name=image::$image"
          echo "::set-output name=latestTags::$latestTag"
      
      - name: Login to Amazon ECR
        run: |
           images=$(yq eval-all '.image' ${{ steps.identify-values-files.outputs.values_files }})
           for image_uri in $images; do
             account_id=$(echo "$image_uri" | cut -d'.' -f1)
             region=$(echo "$image_uri" | cut -d'.' -f4)   
             echo "Logging in to Amazon ECR for image: $image_uri"
             aws ecr get-login-password --region "$region" | docker login --username AWS --password-stdin "$account_id.dkr.ecr.$region.amazonaws.com"
           done

      - name: Debug Step Output
        run: |
          echo "Identify Values Files output: ${{ steps.identify-values-files.outputs.values_files }}"

      - name: List ECR Repositories
        run: |
          echo "Listing ECR repositories..."
          aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]'  
          echo "::set-output name=ecr_repositories::$(aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]' --output table)"
     
      - name: Describe Images per Repository
        run: |
          ecr_repositories="${{ steps.list-ecr-repos.outputs.ecr_repositories }}"
          # Loop through each repository in ecr_repositories and describe images
          while IFS= read -r repo; do
            repo_name=$(echo "$repo" | cut -f1)
            repo_uri=$(echo "$repo" | cut -f2)
            echo "Describing images for repository: $repo_name ($repo_uri)"
            aws ecr describe-images --repository-name "$repo_name"
          done <<< "$ecr_repositories

      - name: Check ECR
        if: ${{ steps.identify-values-files.outputs.values_files != '' }}
        run: |
          # Retrieve values from previous step outputs
          values_files="${{ steps.identify-values-files.outputs.values_files }}"
          ecr_repositories=$(echo "${{ steps.list-ecr-repos.outputs.ecr_repositories }}" | base64 -d)

          # Retrieve values from previous step outputs
          overrideTag=${{ steps.identify-values-files.outputs.overrideTag }}
          image=${{ steps.identify-values-files.outputs.image }}
          latestTags="${{ steps.identify-values-files.outputs.latestTags }}"

          # Check if image, overrideTag, or latestTags exist in ECR repositories
          if [[ -n "$image" ]]; then
            echo "Checking image against ECR repositories..."
            if echo "$ecr_repositories" | grep -q "$image"; then
              echo "Image '$image' found in ECR."
            else
              echo "Image '$image' not found in ECR."
            fi
          fi
          if [[ -n "$overrideTag" ]]; then
            echo "Checking overrideTag against ECR repositories..."
            if echo "$ecr_repositories" | grep -q "$overrideTag"; then
              echo "OverrideTag '$overrideTag' found in ECR."
            else
              echo "OverrideTag '$overrideTag' not found in ECR."  
            fi
          fi
          if [[ -n "$latestTags" ]]; then
            for tag in $latestTags; do
              echo "Checking latestTag '$tag' against ECR repositories..."
              if echo "$ecr_repositories" | grep -q "$tag"; then
                echo "LatestTag '$tag' found in ECR."
              else
                echo "LatestTag '$tag' not found in ECR."
              fi
            done
          fi

      - name: Display Validation Result
        if: ${{ steps.identify-values-files.outputs.values_files != '' }}
        run: |
          # Check if the image, overrideTag, or latestTags are found in the ECR repository
          if [[ -n "${{ steps.check-ecr.outputs.imageFound }}" || -n "${{ steps.check-ecr.outputs.overrideTagFound }}" || -n "${{ steps.check-ecr.outputs.latestTagFound }}" ]]; then
            echo "Validation successful. Image, overrideTag, or latestTags found in ECR."
          else
            echo "Validation failed. Image, overrideTag, and latestTags not found in ECR."
            exit 1
          fi
