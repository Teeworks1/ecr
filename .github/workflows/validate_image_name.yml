---
name: ECR Image Tag Validation

on:
  pull_request:
    paths:
      - '**/values*.yaml'
  push:
    paths:
      - '**/values*.yaml'

jobs:
  validate_image_tags:
    name: Validate Image Tags
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Pull Request
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache repository state
        uses: actions/cache@v2
        with:
          path: |
            path/to/cache-directory
          key: ${{ runner.os }}-build-${{ hashFiles('**/values*.yaml') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR in us-east-1
        uses: aws-actions/amazon-ecr-login@v2

      - name: Identify Values Files
        id: identify-values-files
        run: |
          #!/bin/bash
          # Search for values*.yaml files in the current directory and all subdirectories
          echo "Searching for values*.yaml files..."
          values_files=$(find . -type f -name "values*.yaml")
          # Check if any values*.yaml files were found
          if [ -z "$values_files" ]; then
              echo "No values*.yaml files found."
              exit 1
          fi
          # Initialize variables
          overrideTag=""
          latestTag=""
          processed_images=()
          override_found=false  # Flag to indicate if overrideTag is found
          all_info_found=false  # Flag to indicate if all required information is found
          # Loop through each values*.yaml file
          for file in $values_files; do
              echo "Processing $file..."
              while IFS= read -r line; do
                  # Check if overrideTag exists
                  if [[ $line =~ overrideTag:\ (.+) ]]; then
                      overrideTag="${BASH_REMATCH[1]}"
                      echo "OverrideTag: $overrideTag"
                      override_found=true  # Set the flag to true
                  fi
                  # Check if image exists
                  if [[ $line =~ image:\ (.+) ]]; then
                      image="${BASH_REMATCH[1]}"
                      processed_images+=("$image")
                      echo "Image: $image"
                      # Pair image with overrideTag
                      if [[ -n "$overrideTag" ]]; then
                          echo "Pairing image with overrideTag..."
                          echo "Image: $image, OverrideTag: $overrideTag"
                          processed_images+=("$image")
                      fi
                  fi
                  # Check if all required information is found
                  if $override_found && [[ ${#processed_images[@]} -eq number_of_images ]]; then
                      all_info_found=true
                      break 2  # Break the outer loop
                  fi
              done < "$file"
          done
          # If all required information is found, exit the script
          if $all_info_found; then
              echo "All required information found. Exiting."
              exit 0
          fi
          # If overrideTag is not found, search for latestTag
          if ! $override_found; then
              echo "OverrideTag not found. Searching for latestTag..."
              # Loop through each values*.yaml file
              for file in $values_files; do
                  echo "Processing $file..."
                  while IFS= read -r line; do
                      # Check if latestTag exists
                      if [[ $line =~ latestTag:\ (.+) ]]; then
                          latestTag="${BASH_REMATCH[1]}"
                          echo "Latest Tag: $latestTag"
                      fi
                      # Check if image exists
                      if [[ $line =~ image:\ (.+) ]]; then
                          image="${BASH_REMATCH[1]}"
                          echo "Image: $image"
                          # Pair image with latestTag
                          if [[ -n "$latestTag" ]]; then
                              echo "Pairing image with latestTag..."
                              echo "Image: $image, LatestTag: $latestTag"
                          fi
                      fi
                  done < "$file"
              done
          fi

          # Output the values to be used by the next steps
          echo "::set-output name=overrideTag::$overrideTag"
          echo "::set-output name=values_files::$values_files"
          echo "::set-output name=latestTag::$latestTag"
          echo "::set-output name=image::$image"

      - name: List ECR Repositories
        id: list-ecr-repos
        run: |
          echo "Listing ECR repositories..."
          aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]'
          echo "::set-output name=ecr_repositories::$(aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]' --output table)"

      - name: Check Overrides and Validate Image Tags in ECR
        if: ${{ steps.identify-values-files.outputs.values_files != '' }}
        run: |
          # Retrieve values from previous step outputs
          overrideTag=${{ steps.identify-values-files.outputs.overrideTag }}
          latestTag=${{ steps.identify-values-files.outputs.latestTag }}
          # Retrieve ECR repositories list
          ecr_repositories=$(echo "${{ steps.list-ecr-repos.outputs.ecr_repositories }}" )
          # Check if overrideTag or latestTag exists in ECR repositories
          if [[ -n "$overrideTag" || -n "$latestTag" ]]; then
              echo "Checking overrideTag/latestTag against ECR repositories..."
              tagToPair=""
              if [[ -n "$overrideTag" && $(echo "$ecr_repositories" | grep -q "$overrideTag") ]]; then
            
                  echo "OverrideTag '$overrideTag' found in ECR. Validation successful."
                  tagToPair="$overrideTag"
              elif [[ -n "$latestTag" && $(echo "$ecr_repositories" | grep -q "$latestTag") ]]; then
                  echo "LatestTag '$latestTag' found in ECR. Validation successful."
                  tagToPair="$latestTag"
              else
                  echo "Error: Neither OverrideTag nor LatestTag found in ECR repository. Validation failed."
                  exit 1
              fi
              # Pair image with tag (overrideTag or latestTag)
              echo "Pairing image with $tagToPair..."
              echo "Image: $image, Tag: $tagToPair"
              # Exit with success
              exit 0
          else
              # If neither overrideTag nor latestTag are found, exit with failure
              echo "Error: Neither OverrideTag nor LatestTag provided. Validation failed"
              exit 1
          fi

      - name: Display Validation Result
        run: |
          if [ $? -eq 0 ]; then
              echo "Validation successful. All image tags are valid."
          else
              echo  "Validation failed. There are issues with the image tags."
          fi
