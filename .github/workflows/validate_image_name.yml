name: ECR Image Tag Validation

on:
  pull_request:
    paths:
      - '**/values*.yaml'
  push:
    paths:
      - '**/values*.yaml'

jobs:
  validate_image_tags:
    name: Validate Image Tags
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Pull Request
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache repository state
        uses: actions/cache@v2
        with:
          path: |
            path/to/cache-directory
          key: ${{ runner.os }}-build-${{ hashFiles('**/values*.yaml') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Identify Values Files
        id: identify-values-files
        run: |
          #!/bin/bash

          echo "Searching for values*.yaml files..."
          values_files=$(find . -type f -name "values*.yaml")

          if [ -n "$values_files" ]; then
              echo "Values*.yaml files found:"
              echo "$values_files"
              echo "::set-output name=values_files::$values_files"
          else
              echo "No values*.yaml files found."
              exit 1
          fi
          
          overrideTag=""
          image=""
          latestTags=()

          for file in $values_files; do
              echo "Processing $file..."
              while IFS= read -r line; do
                  if [[ $line =~ image:\ (.+) ]]; then
                      image="${BASH_REMATCH[1]}"
                      echo "Image: $image"
                  fi
                  if [[ $line =~ overrideTag:\ (.+) ]]; then
                      overrideTag="${BASH_REMATCH[1]}"
                      echo "Override Tag: $overrideTag"
                      echo "Image: $image"
                      # If overrideTag is found, no need to search for latestTag
                      latestTags=()  # Clearing the latestTags array
                      continue
                  fi
                  if [[ $line =~ latestTag:\ (.+) ]]; then
                      if [[ -z "$overrideTag" ]]; then
                          latestTag+=("${BASH_REMATCH[1]}") # Append the latestTag to the array
                          echo "Latest Tag: ${BASH_REMATCH[1]}"
                      fi
                  fi
              done < "$file"
              
              # Check if overrideTag is found before breaking the loop
              if [[ -n "$overrideTag" ]]; then
                  break
              fi
          done
          # Set outputs
          echo "::set-output name=overrideTag::$overrideTag"
          echo "::set-output name=image::$image"
          echo "::set-output name=latestTags::$latestTag"

      - name: Debug Step Output
        run: |
          echo "Identify Values Files output: ${{ steps.identify-values-files.outputs.values_files }}"

      - name: List ECR Repositories
        run: |
          echo "Listing ECR repositories..."
          aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]'  
          echo "::set-output name=ecr_repositories::$(aws ecr describe-repositories --query 'repositories[*].[repositoryName, repositoryUri]' --output table)"
    
      - name: Check Overrides and Validate Image Tags in ECR
        if: ${{ steps.identify-values-files.outputs.values_files != '' }}
        run: |
          # Retrieve values from previous step outputs
          overrideTag=${{ steps.identify-values-files.outputs.overrideTag }}
          image=${{ steps.identify-values-files.outputs.image }}
          latestTag=${{ steps.identify-values-files.outputs.latestTag }}
          # Retrieve ECR repositories list
          ecr_repositories=$(echo "${{ steps.list-ecr-repos.outputs.ecr_repositories }}" | base64 -d)
          # Check if overrideTag exists in ECR repositories
          if [[ -n "$overrideTag" ]]; then
              echo "Checking overrideTag against ECR repositories..."
              if echo "$ecr_repositories" | grep -q "$overrideTag"; then
                  echo "OverrideTag '$overrideTag' found in ECR. Validation successful."
                  echo "Pairing image with overrideTag..."
                  echo "Image: $image, OverrideTag: $overrideTag"
                  exit 0
              elif
                  # Check if latestTag exists in ECR repositories
                  echo "$ecr_repositories" | grep -q "$latestTag"
                  echo "LatestTag '$latestTag' found in ECR. Validation successful."
                  echo "Pairing image with latestTag..."
                  echo "Image: $image, LatestTag: $latestTag"              
              else
                 echo " LatestTag or OverrideTag not found in ECR. Validation failed"
          fi  
      - name: Display Validation Result
        run: |
          if [ $? -eq 0 ]; then
              echo "Validation successful. All image tags are valid."
          else
              echo  "Validation failed. There are issues with the image tags."
          fi
